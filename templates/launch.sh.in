#!/usr/bin/env bash
set -euo pipefail

# ========================== CONFIGURATION ===========================

# Colors
COLOR_SCRIPT="$(dirname "$0")/.term/colors.sh"
if [[ -f "$COLOR_SCRIPT" ]]; then
  source "$COLOR_SCRIPT"
else
  BLUE="" CYAN="" GREEN="" YELLOW="" RED="" RESET=""
fi

# Standard directories
BUILD_DIR="build"
BIN_DIR="bin"
EXECUTABLE="@PROJECT_NAME@"  # Ajuste conforme seu CMakeLists.txt
WATCH_DIRS=("src" "modules" "libF77")
WATCH_PATTERN='\.f90$|\.f$'

# Dependencies
DEPENDENCIES=(cmake gfortran make inotify-tools)

# ======================== FUNCTIONS ===========================

build() {
  echo "${BLUE}:: Project building...${RESET}"
  cmake -B "$BUILD_DIR" -S .
  cmake --build "$BUILD_DIR"
  echo "-> ${GREEN}Build completed.${RESET}"
}

run() {
  echo "${CYAN}:: Executing...${RESET}"
  "./$BIN_DIR/$EXECUTABLE"
}

install() {
  echo "${GREEN}:: Verifying dependences...${RESET}"
  for dep in "${DEPENDENCIES[@]}"; do
    if ! command -v "$dep" &>/dev/null; then
      echo "${YELLOW}-- Installing dependences...:${RESET} $dep"
      if command -v apt &>/dev/null; then
        sudo apt update && sudo apt install -y "$dep"
      elif command -v dnf &>/dev/null; then
        sudo dnf install -y "$dep"
      elif command -v pacman &>/dev/null; then
        sudo pacman -Sy "$dep" --noconfirm
      else
        echo "${RED}Package Manager not supported. Please Install $dep manually${RESET}"
      fi
    else
      echo "-- $dep Already Installed."
    fi
  done
  echo "${GREEN}:: All dependences installed.${RESET}"
}

test_project() {
  echo "${YELLOW}:: Executing tests...${RESET}"
  ctest --test-dir "$BUILD_DIR"
}

clean() {
  echo "${RED}:: Cleaning build...${RESET}"
  rm -rf "$BUILD_DIR" "$BIN_DIR"
  echo "${GREEN}:: Cleaned.${RESET}"
}

watch() {
  echo "${BLUE}:: Watching for changes...${RESET}"
  command -v inotifywait &>/dev/null || {
    echo "${RED} inotifywait not found.${RESET}"
    exit 1
  }
  while true; do
    inotifywait -e modify -e create -e delete --include "$WATCH_PATTERN" "${WATCH_DIRS[@]}"
    echo "${YELLOW}:: Changes detected. Reconfiguring...${RESET}"
    if build; then
      run
    else
      echo "${RED}:: Build failed...${RESET}"
    fi
  done
}

help() {
  cat <<EOF
Usage: ./launch.sh <comando>

Comandos dispon√≠veis:
  install     Verify and install dependences
  build       Project build
  run         Run project
  test        Test project (CTest)
  clean       Remove build
  watch       Automatically recompile when files change
  help        Show this help

EOF
}

# ========================== EXECUTION ===========================

case "${1:-}" in
  install) install ;;
  build) build ;;
  run) run ;;
  test) test_project ;;
  watch) watch ;;
  clean) clean ;;
  help) help ;;
  "")
    echo "${YELLOW}Nenhum comando fornecido. Executando build + run...${RESET}"
    build
    run
    ;;
  *)
    help ;;
esac
