#!/usr/bin/env bash
set -euo pipefail
source "$(dirname "$0")/scripts/colors.sh"

# Environment variables
BUILD_DIR="build"
SRC_DIR="src"
BIN_DIR="bin"

# Exectable name
EXECUTABLE="@PROJECT_NAME@.bin"

# Build function
build() {
    echo "${BLUE}:: Building project...${RESET}"
    cmake -B "$BUILD_DIR" -S .
    cmake --build "$BUILD_DIR"
    echo "-> ${CYAN}Build complete.${RESET}"
}

# Run function
run() {
    echo "${CYAN}:: Running project...${RESET}"
    "./$BIN_DIR/$EXECUTABLE"
}

# Function to install dependencies
install() {
    echo "${GREEN}:: Checking dependencies...${RESET}"

    # List of required command-line tools
    local dependencies=(cmake gfortran make inotify-tools)

    for dep in "${dependencies[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            echo "${YELLOW}-- dependency not found:${RESET} $dep"
            echo "${GREEN} Installing${RESET} $dep..."

            if [[ -x "$(command -v apt)" ]]; then
                sudo apt update && sudo apt install -y "$dep"
            elif [[ -x "$(command -v dnf)" ]]; then
                sudo dnf install -y "$dep"
            elif [[ -x "$(command -v pacman)" ]]; then
                sudo pacman -Sy "$dep" --noconfirm
            else
                echo "-> Unsupported package manager. Please install $dep manually."
            fi
        else
            echo "-- $dep is already installed."
        fi
    done

    echo "${GREEN}-- All dependencies are up to date.${RESET}"
}

# Function to run tests
test_project() {
    echo "${YELLOW}:: Running tests...${RESET}"
    ctest --test-dir "$BUILD_DIR"
}

# Function to watch for changes
watch() {
    echo "${BLUE}:: Watching for changes in .f90 or .f files...${RESET}"
    command -v inotifywait >/dev/null 2>&1 || {
        echo "-> '${YELLOW}inotifywait' is not installed. Run: sudo pacman -Syyu inotify-tools${RESET}"
        exit 1
    }

    while true; do
        inotifywait -e modify -e create -e delete --include '\.f90$|\.f$' src/ modules/ libF77/
        echo "${YELLOW}:: Change detected. Rebuilding...${RESET}"
        build
        run
    done
}

# Help
help() {
    echo "Usage: ./launch.sh <command>"
    echo ""
    echo "Available commands:"
    echo "  build       Build the project with CMake"
    echo "  run         Run the main executable"
    echo "  test        Run tests with CTest"
    echo "  install     Install system or library dependencies"
    echo "  help        Show this message"
}

# Main commands
case "${1:-help}" in
    install) install ;;
    build) build ;;
    run) run ;;
    test) test_project ;;
    watch) watch ;;
    *) help ;;
esac
