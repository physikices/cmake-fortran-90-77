#!/usr/bin/env bash
set -euo pipefail

# ========================== CONFIGURAÇÕES ===========================

# Cores
COLOR_SCRIPT="$(dirname "$0")/.term/colors.sh"
if [[ -f "$COLOR_SCRIPT" ]]; then
  source "$COLOR_SCRIPT"
else
  BLUE="" CYAN="" GREEN="" YELLOW="" RED="" RESET=""
fi

# Diretórios e padrões
BUILD_DIR="build"
BIN_DIR="bin"
EXECUTABLE="@PROJECT_NAME@"  # Ajuste conforme seu CMakeLists.txt
WATCH_DIRS=("src" "modules" "libF77")
WATCH_PATTERN='\.f90$|\.f$'

# Dependências
DEPENDENCIES=(cmake gfortran make inotify-tools)

# ========================== FUNÇÕES ===========================

build() {
  echo "${BLUE}:: Compilando o projeto...${RESET}"
  cmake -B "$BUILD_DIR" -S .
  cmake --build "$BUILD_DIR"
  echo "-> ${GREEN}Build finalizado.${RESET}"
}

run() {
  echo "${CYAN}:: Executando o projeto...${RESET}"
  "./$BIN_DIR/$EXECUTABLE"
}

install() {
  echo "${GREEN}:: Verificando dependências...${RESET}"
  for dep in "${DEPENDENCIES[@]}"; do
    if ! command -v "$dep" &>/dev/null; then
      echo "${YELLOW}-- Instalando dependência:${RESET} $dep"
      if command -v apt &>/dev/null; then
        sudo apt update && sudo apt install -y "$dep"
      elif command -v dnf &>/dev/null; then
        sudo dnf install -y "$dep"
      elif command -v pacman &>/dev/null; then
        sudo pacman -Sy "$dep" --noconfirm
      else
        echo "${RED}Gerenciador de pacotes não suportado. Instale $dep manualmente.${RESET}"
      fi
    else
      echo "-- $dep já instalado."
    fi
  done
  echo "${GREEN}:: Todas dependências atendidas.${RESET}"
}

test_project() {
  echo "${YELLOW}:: Executando testes...${RESET}"
  ctest --test-dir "$BUILD_DIR"
}

clean() {
  echo "${RED}:: Limpando artefatos de build...${RESET}"
  rm -rf "$BUILD_DIR" "$BIN_DIR"
  echo "${GREEN}:: Limpeza concluída.${RESET}"
}

watch() {
  echo "${BLUE}:: Monitorando alterações...${RESET}"
  command -v inotifywait &>/dev/null || {
    echo "${RED}inotifywait não encontrado.${RESET}"
    exit 1
  }
  while true; do
    inotifywait -e modify -e create -e delete --include "$WATCH_PATTERN" "${WATCH_DIRS[@]}"
    echo "${YELLOW}:: Alteração detectada. Recompilando...${RESET}"
    if build; then
      run
    else
      echo "${RED}:: Erro no build. Aguardando alterações...${RESET}"
    fi
  done
}

help() {
  cat <<EOF
Usage: ./launch.sh <comando>

Comandos disponíveis:
  install     Verificar e instalar dependências
  build       Compilar o projeto
  run         Executar o binário principal
  test        Rodar testes (CTest)
  clean       Remover artefatos de build
  watch       Recompilar automaticamente ao detectar mudanças
  help        Exibir esta ajuda

EOF
}

# ========================== EXECUÇÃO ===========================

case "${1:-}" in
  install) install ;;
  build) build ;;
  run) run ;;
  test) test_project ;;
  watch) watch ;;
  clean) clean ;;
  help) help ;;
  "")
    echo "${YELLOW}Nenhum comando fornecido. Executando build + run...${RESET}"
    build
    run
    ;;
  *)
    help ;;
esac
